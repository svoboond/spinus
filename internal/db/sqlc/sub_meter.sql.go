// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sub_meter.sql

package spinusdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubMeter = `-- name: CreateSubMeter :one
INSERT INTO sub_meter (
	meter_id, subid, fk_main_meter, fk_user
) SELECT $1, COALESCE(MAX(subid), 0) + 1, $2, $3
	FROM sub_meter
	WHERE fk_main_meter = $2
RETURNING fk_main_meter, subid, meter_id, fk_user
`

type CreateSubMeterParams struct {
	MeterID     pgtype.Text
	FkMainMeter int32
	FkUser      int32
}

func (q *Queries) CreateSubMeter(ctx context.Context, arg CreateSubMeterParams) (SubMeter, error) {
	row := q.db.QueryRow(ctx, createSubMeter, arg.MeterID, arg.FkMainMeter, arg.FkUser)
	var i SubMeter
	err := row.Scan(
		&i.FkMainMeter,
		&i.Subid,
		&i.MeterID,
		&i.FkUser,
	)
	return i, err
}

const getSubMeter = `-- name: GetSubMeter :one
SELECT fk_main_meter, subid, meter_id, fk_user FROM sub_meter
WHERE fk_main_meter = $1 AND subid = $2
LIMIT 1
`

type GetSubMeterParams struct {
	FkMainMeter int32
	Subid       int32
}

func (q *Queries) GetSubMeter(ctx context.Context, arg GetSubMeterParams) (SubMeter, error) {
	row := q.db.QueryRow(ctx, getSubMeter, arg.FkMainMeter, arg.Subid)
	var i SubMeter
	err := row.Scan(
		&i.FkMainMeter,
		&i.Subid,
		&i.MeterID,
		&i.FkUser,
	)
	return i, err
}

const listSubMeters = `-- name: ListSubMeters :many
SELECT subid, meter_id, email
FROM sub_meter
JOIN spinus_user
	ON sub_meter.fk_user = spinus_user.id
WHERE fk_main_meter = $1
ORDER BY subid
`

type ListSubMetersRow struct {
	Subid   int32
	MeterID pgtype.Text
	Email   string
}

func (q *Queries) ListSubMeters(ctx context.Context, fkMainMeter int32) ([]ListSubMetersRow, error) {
	rows, err := q.db.Query(ctx, listSubMeters, fkMainMeter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSubMetersRow
	for rows.Next() {
		var i ListSubMetersRow
		if err := rows.Scan(&i.Subid, &i.MeterID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
