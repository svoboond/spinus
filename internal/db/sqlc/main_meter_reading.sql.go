// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: main_meter_reading.sql

package spinusdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMainMeterReading = `-- name: CreateMainMeterReading :one
INSERT INTO main_meter_reading (
	fk_main_meter, reading_value, reading_date
) VALUES (
	$1, $2, $3
)
RETURNING id, fk_main_meter, reading_value, reading_date
`

type CreateMainMeterReadingParams struct {
	FkMainMeter  int32
	ReadingValue float64
	ReadingDate  pgtype.Date
}

func (q *Queries) CreateMainMeterReading(ctx context.Context, arg CreateMainMeterReadingParams) (MainMeterReading, error) {
	row := q.db.QueryRow(ctx, createMainMeterReading, arg.FkMainMeter, arg.ReadingValue, arg.ReadingDate)
	var i MainMeterReading
	err := row.Scan(
		&i.ID,
		&i.FkMainMeter,
		&i.ReadingValue,
		&i.ReadingDate,
	)
	return i, err
}

const listMainMeterReadings = `-- name: ListMainMeterReadings :many
SELECT id, fk_main_meter, reading_value, reading_date FROM main_meter_reading
WHERE fk_main_meter = $1
ORDER BY reading_date DESC
`

func (q *Queries) ListMainMeterReadings(ctx context.Context, fkMainMeter int32) ([]MainMeterReading, error) {
	rows, err := q.db.Query(ctx, listMainMeterReadings, fkMainMeter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MainMeterReading
	for rows.Next() {
		var i MainMeterReading
		if err := rows.Scan(
			&i.ID,
			&i.FkMainMeter,
			&i.ReadingValue,
			&i.ReadingDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
