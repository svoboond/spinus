// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: main_meter.sql

package db

import (
	"context"
)

const createMainMeter = `-- name: CreateMainMeter :one
INSERT INTO main_meter (
  no, address
) VALUES (
  $1, $2
)
RETURNING id, no, address
`

type CreateMainMeterParams struct {
	No      int64
	Address string
}

func (q *Queries) CreateMainMeter(ctx context.Context, arg CreateMainMeterParams) (MainMeter, error) {
	row := q.db.QueryRow(ctx, createMainMeter, arg.No, arg.Address)
	var i MainMeter
	err := row.Scan(&i.ID, &i.No, &i.Address)
	return i, err
}

const deleteMainMeter = `-- name: DeleteMainMeter :exec
DELETE FROM main_meter
WHERE id = $1
`

func (q *Queries) DeleteMainMeter(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMainMeter, id)
	return err
}

const getMainMeter = `-- name: GetMainMeter :one
SELECT id, no, address FROM main_meter
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMainMeter(ctx context.Context, id int64) (MainMeter, error) {
	row := q.db.QueryRow(ctx, getMainMeter, id)
	var i MainMeter
	err := row.Scan(&i.ID, &i.No, &i.Address)
	return i, err
}

const listMainMeters = `-- name: ListMainMeters :many
SELECT id, no, address FROM main_meter
ORDER BY no
`

func (q *Queries) ListMainMeters(ctx context.Context) ([]MainMeter, error) {
	rows, err := q.db.Query(ctx, listMainMeters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MainMeter
	for rows.Next() {
		var i MainMeter
		if err := rows.Scan(&i.ID, &i.No, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMainMeter = `-- name: UpdateMainMeter :exec
UPDATE main_meter
  set no = $2,
  address = $3
WHERE id = $1
`

type UpdateMainMeterParams struct {
	ID      int64
	No      int64
	Address string
}

func (q *Queries) UpdateMainMeter(ctx context.Context, arg UpdateMainMeterParams) error {
	_, err := q.db.Exec(ctx, updateMainMeter, arg.ID, arg.No, arg.Address)
	return err
}
