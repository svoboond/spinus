// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: main_meter.sql

package spinusdb

import (
	"context"
)

const createMainMeter = `-- name: CreateMainMeter :one
INSERT INTO main_meter (
	meter_id, energy, address, fk_user
) VALUES (
	$1, $2, $3, $4
)
RETURNING id, meter_id, energy, address, fk_user
`

type CreateMainMeterParams struct {
	MeterID string
	Energy  Energy
	Address string
	FkUser  int32
}

func (q *Queries) CreateMainMeter(ctx context.Context, arg CreateMainMeterParams) (MainMeter, error) {
	row := q.db.QueryRow(ctx, createMainMeter,
		arg.MeterID,
		arg.Energy,
		arg.Address,
		arg.FkUser,
	)
	var i MainMeter
	err := row.Scan(
		&i.ID,
		&i.MeterID,
		&i.Energy,
		&i.Address,
		&i.FkUser,
	)
	return i, err
}

const deleteMainMeter = `-- name: DeleteMainMeter :exec
DELETE FROM main_meter
WHERE id = $1
`

func (q *Queries) DeleteMainMeter(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMainMeter, id)
	return err
}

const getMainMeter = `-- name: GetMainMeter :one
SELECT id, meter_id, energy, address, fk_user FROM main_meter
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMainMeter(ctx context.Context, id int32) (MainMeter, error) {
	row := q.db.QueryRow(ctx, getMainMeter, id)
	var i MainMeter
	err := row.Scan(
		&i.ID,
		&i.MeterID,
		&i.Energy,
		&i.Address,
		&i.FkUser,
	)
	return i, err
}

const listMainMeters = `-- name: ListMainMeters :many
SELECT id, meter_id, energy, address, fk_user FROM main_meter
ORDER BY id
`

func (q *Queries) ListMainMeters(ctx context.Context) ([]MainMeter, error) {
	rows, err := q.db.Query(ctx, listMainMeters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MainMeter
	for rows.Next() {
		var i MainMeter
		if err := rows.Scan(
			&i.ID,
			&i.MeterID,
			&i.Energy,
			&i.Address,
			&i.FkUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMainMeter = `-- name: UpdateMainMeter :exec
UPDATE main_meter set
	meter_id = $2,
	energy = $3,
	address = $4,
	fk_user = $5
WHERE id = $1
`

type UpdateMainMeterParams struct {
	ID      int32
	MeterID string
	Energy  Energy
	Address string
	FkUser  int32
}

func (q *Queries) UpdateMainMeter(ctx context.Context, arg UpdateMainMeterParams) error {
	_, err := q.db.Exec(ctx, updateMainMeter,
		arg.ID,
		arg.MeterID,
		arg.Energy,
		arg.Address,
		arg.FkUser,
	)
	return err
}
