// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sub_meter_reading.sql

package spinusdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubMeterReading = `-- name: CreateSubMeterReading :one
INSERT INTO sub_meter_reading (
	fk_sub_meter, subid, reading_value, reading_date
) SELECT $1, COALESCE(MAX(subid), 0) + 1, $2, $3
	FROM sub_meter_reading
	WHERE fk_sub_meter = $1
RETURNING id, fk_sub_meter, subid, reading_value, reading_date
`

type CreateSubMeterReadingParams struct {
	FkSubMeter   int32
	ReadingValue float64
	ReadingDate  pgtype.Date
}

func (q *Queries) CreateSubMeterReading(ctx context.Context, arg CreateSubMeterReadingParams) (SubMeterReading, error) {
	row := q.db.QueryRow(ctx, createSubMeterReading, arg.FkSubMeter, arg.ReadingValue, arg.ReadingDate)
	var i SubMeterReading
	err := row.Scan(
		&i.ID,
		&i.FkSubMeter,
		&i.Subid,
		&i.ReadingValue,
		&i.ReadingDate,
	)
	return i, err
}

const listSubMeterReadings = `-- name: ListSubMeterReadings :many
SELECT id, fk_sub_meter, subid, reading_value, reading_date FROM sub_meter_reading
WHERE fk_sub_meter = $1
ORDER BY reading_date DESC
`

func (q *Queries) ListSubMeterReadings(ctx context.Context, fkSubMeter int32) ([]SubMeterReading, error) {
	rows, err := q.db.Query(ctx, listSubMeterReadings, fkSubMeter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubMeterReading
	for rows.Next() {
		var i SubMeterReading
		if err := rows.Scan(
			&i.ID,
			&i.FkSubMeter,
			&i.Subid,
			&i.ReadingValue,
			&i.ReadingDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
