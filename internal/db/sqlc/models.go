// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package spinusdb

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Energy string

const (
	EnergyElectricity Energy = "electricity"
	EnergyGas         Energy = "gas"
	EnergyWater       Energy = "water"
)

func (e *Energy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Energy(s)
	case string:
		*e = Energy(s)
	default:
		return fmt.Errorf("unsupported scan type for Energy: %T", src)
	}
	return nil
}

type NullEnergy struct {
	Energy Energy
	Valid  bool // Valid is true if Energy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnergy) Scan(value interface{}) error {
	if value == nil {
		ns.Energy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Energy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnergy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Energy), nil
}

func (e Energy) Valid() bool {
	switch e {
	case EnergyElectricity,
		EnergyGas,
		EnergyWater:
		return true
	}
	return false
}

type MainMeterBillingStatus string

const (
	MainMeterBillingStatusInprogress MainMeterBillingStatus = "in progress"
	MainMeterBillingStatusCompleted  MainMeterBillingStatus = "completed"
)

func (e *MainMeterBillingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MainMeterBillingStatus(s)
	case string:
		*e = MainMeterBillingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MainMeterBillingStatus: %T", src)
	}
	return nil
}

type NullMainMeterBillingStatus struct {
	MainMeterBillingStatus MainMeterBillingStatus
	Valid                  bool // Valid is true if MainMeterBillingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMainMeterBillingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MainMeterBillingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MainMeterBillingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMainMeterBillingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MainMeterBillingStatus), nil
}

func (e MainMeterBillingStatus) Valid() bool {
	switch e {
	case MainMeterBillingStatusInprogress,
		MainMeterBillingStatusCompleted:
		return true
	}
	return false
}

type SubMeterBillingStatus string

const (
	SubMeterBillingStatusUnpaid SubMeterBillingStatus = "unpaid"
	SubMeterBillingStatusPaid   SubMeterBillingStatus = "paid"
)

func (e *SubMeterBillingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubMeterBillingStatus(s)
	case string:
		*e = SubMeterBillingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SubMeterBillingStatus: %T", src)
	}
	return nil
}

type NullSubMeterBillingStatus struct {
	SubMeterBillingStatus SubMeterBillingStatus
	Valid                 bool // Valid is true if SubMeterBillingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubMeterBillingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SubMeterBillingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubMeterBillingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubMeterBillingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubMeterBillingStatus), nil
}

func (e SubMeterBillingStatus) Valid() bool {
	switch e {
	case SubMeterBillingStatusUnpaid,
		SubMeterBillingStatusPaid:
		return true
	}
	return false
}

type MainMeter struct {
	ID           int32
	MeterID      string
	Energy       Energy
	Address      string
	CurrencyCode string
	FkUser       int32
}

type MainMeterBilling struct {
	ID                   int32
	FkMainMeter          int32
	Subid                int32
	MaxDayDiff           int32
	BeginDate            pgtype.Date
	EndDate              pgtype.Date
	EnergyConsumption    float64
	ConsumedEnergyPrice  float64
	ServicePrice         pgtype.Float8
	AdvancePrice         float64
	FromFinancialBalance float64
	ToPay                float64
	Status               MainMeterBillingStatus
}

type MainMeterBillingPeriod struct {
	ID                  int32
	FkMainBilling       int32
	Subid               int32
	BeginDate           pgtype.Date
	EndDate             pgtype.Date
	BeginReadingValue   float64
	EndReadingValue     float64
	EnergyConsumption   float64
	ConsumedEnergyPrice float64
	ServicePrice        pgtype.Float8
	AdvancePrice        float64
	TotalPrice          float64
}

type SpinusUser struct {
	ID       int32
	Username string
	Email    string
	Password string
}

type SubMeter struct {
	ID               int32
	FkMainMeter      int32
	Subid            int32
	MeterID          pgtype.Text
	FinancialBalance float64
	FkUser           int32
}

type SubMeterBilling struct {
	ID                   int32
	FkSubMeter           int32
	FkMainBilling        int32
	Subid                int32
	EnergyConsumption    float64
	ConsumedEnergyPrice  float64
	ServicePrice         pgtype.Float8
	AdvancePrice         float64
	FromFinancialBalance float64
	ToPay                float64
	Status               SubMeterBillingStatus
}

type SubMeterBillingPeriod struct {
	ID                  int32
	FkSubBilling        int32
	FkMainBillingPeriod int32
	EnergyConsumption   float64
	ConsumedEnergyPrice float64
	ServicePrice        pgtype.Float8
	AdvancePrice        float64
	TotalPrice          float64
}

type SubMeterReading struct {
	ID           int32
	FkSubMeter   int32
	Subid        int32
	ReadingValue float64
	ReadingDate  pgtype.Date
}
